{
source("globalEnvironment.R")
source("person.R")
source("population.R")
source("rHelperFunctions.R")
source("rCoreFunctions.R")
source("plots.R")
source("testing_ncd_prevalences.R")
source("ncdTestFunctions.R")
}
######
# Create the population in year 2014; save the stats and move the clock to 2015
rep=1
bDebugMode=T
set.seed(1)
pop<-create.initial.population(id = rep,n = POP.SIZE)
# setting up person attributes
pop<-invisible(set.initial.hiv.status(pop ))
#read pooled 10-year CVD risk data by age, sex and ncd status
cvd.risk = pop$params$pooled.cvd.risk.by.age.sex
younger.age.groups = c(1:8) #c("0-4","5-9","10-14","15-19","20-24","25-29","30-34","35-39")
p=pop$members[[1]]
# for whatever age group they are in, access the 10-year risk for the previous age group
# this is what is used to calculate annual risk
p.age.indicator = p$agegroup-1
p.age.indicator = pmax(1,p.age.indicator) # for the youngest age group, just make this 1, not 0
p.age.indicator
p$agegroup
p.age.group=DIM.NAMES.AGE[p.age.indicator] # access age group name
p.age.group
p.cvd.risk.10.year = (cvd.risk[p.age.group,p$sex,p$ncdState])/100
p.cvd.risk.10.year
p.cvd.risk.10.year = (cvd.risk[p.age.indicator,p$sex,p$ncdState])
p.cvd.risk.10.year
# need a standard set of plots to review the population
# please add notes/documentation to plots.R
#
#  R HIVNCD 2022
#  Driver.R class
#
#####################################
print("Sourcing Driver.R ... ")
{
source("globalEnvironment.R")
source("person.R")
source("population.R")
source("rHelperFunctions.R")
source("rCoreFunctions.R")
source("plots.R")
source("testing_ncd_prevalences.R")
source("ncdTestFunctions.R")
}
# Create the population in year 2014; save the stats and move the clock to 2015
rep=1
bDebugMode=T
set.seed(1)
pop<-create.initial.population(id = rep,n = POP.SIZE)
# setting up person attributes
pop<-invisible(set.initial.hiv.status(pop ))
#read pooled 10-year CVD risk data by age, sex and ncd status
cvd.risk = pop$params$pooled.cvd.risk.by.age.sex
p=pop$members[1]
# for whatever age group they are in, access the 10-year risk for the previous age group
# this is what is used to calculate annual risk
p.age.indicator=pmax(1, p$agegroup-1 )# for the youngest age group, just make this 1, not 0
p.age.indicator
# for whatever age group they are in, access the 10-year risk for the previous age group
# this is what is used to calculate annual risk
p.age.indicator=pmax(1, p$agegroup-1 )# for the youngest age group, just make this 1, not 0
p.age.indicator
pmax(1, p$agegroup-1 )# for the youngest age group, just make this 1, not 0
p
p$agegroup
p$age
p=pop$members[[1]]
# for whatever age group they are in, access the 10-year risk for the previous age group
# this is what is used to calculate annual risk
p.age.indicator=pmax(1, p$agegroup-1 )# for the youngest age group, just make this 1, not 0
p.age.indicator
p.cvd.risk.10.year = (cvd.risk[p.age.indicator,p$sex,p$ncdState])
p.cvd.risk.10.year
# Convert from 10-year CVD risk to annual
p.cvd.risk.annual = -((log(1-p.cvd.risk.10.year))/10) #exponential decay
p.cvd.risk.annual
#4-load pooled CVD risk by age/sex/ncd category
load('data/10.year.cvd.risk.by.age.sex.ncd.Rdata')
q=pooled.risk.by.age.sex.ncd
# dimnames(q)
x=array(0,dim = c(DIM.AGE,DIM.SEX,DIM.NCD),dimnames = list(DIM.NAMES.AGE,DIM.NAMES.SEX,DIM.NAMES.NCD))
# dimnames(x)
x[unlist(dimnames(q)[1]),unlist(dimnames(q)[2]),unlist(dimnames(q)[3])]<-q
for(i in 1:8) x[c(DIM.NAMES.AGE[i]),,]=x["40-44",,]
for(i in 16:17) x[c(DIM.NAMES.AGE[i]),,]=x["70-74",,]
-((log(1- x/100 ))/10)
x
#4-load pooled CVD risk by age/sex/ncd category
load('data/10.year.cvd.risk.by.age.sex.ncd.Rdata')
q=pooled.risk.by.age.sex.ncd
# dimnames(q)
x=array(0,dim = c(DIM.AGE,DIM.SEX,DIM.NCD),dimnames = list(DIM.NAMES.AGE,DIM.NAMES.SEX,DIM.NAMES.NCD))
# dimnames(x)
x[unlist(dimnames(q)[1]),unlist(dimnames(q)[2]),unlist(dimnames(q)[3])]<-q
for(i in 1:8) x[c(DIM.NAMES.AGE[i]),,]=x["40-44",,]
for(i in 16:17) x[c(DIM.NAMES.AGE[i]),,]=x["70-74",,]
-((log(1- x/100 ))/10)
#@MS: we can just compute the annual cvd risk here instead of calculating it for each agent everytime we read it
MP$annual.cvd.risk.by.age.sex=-((log(1- x/100 ))/10)
# need a standard set of plots to review the population
# please add notes/documentation to plots.R
#
#  R HIVNCD 2022
#  Driver.R class
#
#####################################
print("Sourcing Driver.R ... ")
{
source("globalEnvironment.R")
source("person.R")
source("population.R")
source("rHelperFunctions.R")
source("rCoreFunctions.R")
source("plots.R")
source("testing_ncd_prevalences.R")
source("ncdTestFunctions.R")
}
# Create the population in year 2014; save the stats and move the clock to 2015
rep=1
bDebugMode=T
set.seed(1)
pop<-create.initial.population(id = rep,n = POP.SIZE)
# setting up person attributes
pop<-invisible(set.initial.hiv.status(pop ))
p$agegroup
# need a standard set of plots to review the population
# please add notes/documentation to plots.R
#
#  R HIVNCD 2022
#  Driver.R class
#
#####################################
print("Sourcing Driver.R ... ")
{
source("globalEnvironment.R")
source("person.R")
source("population.R")
source("rHelperFunctions.R")
source("rCoreFunctions.R")
source("plots.R")
source("testing_ncd_prevalences.R")
source("ncdTestFunctions.R")
}
# Create the population in year 2014; save the stats and move the clock to 2015
rep=1
bDebugMode=T
set.seed(1)
pop<-create.initial.population(id = rep,n = POP.SIZE)
# setting up person attributes
pop<-invisible(set.initial.hiv.status(pop ))
pop<-invisible(set.cvd.risk(pop))
# need a standard set of plots to review the population
# please add notes/documentation to plots.R
#
#  R HIVNCD 2022
#  Driver.R class
#
#####################################
print("Sourcing Driver.R ... ")
{
source("globalEnvironment.R")
source("person.R")
source("population.R")
source("rHelperFunctions.R")
source("rCoreFunctions.R")
source("plots.R")
source("testing_ncd_prevalences.R")
source("ncdTestFunctions.R")
}
##############
# Create the population in year 2014; save the stats and move the clock to 2015
rep=1
bDebugMode=T
set.seed(1)
pop<-create.initial.population(id = rep,n = POP.SIZE)
# setting up person attributes
pop<-invisible(set.initial.hiv.status(pop ))
pop<-invisible(set.cvd.risk(pop))
pop$record.annual.stats()
# need a standard set of plots to review the population
# please add notes/documentation to plots.R
#
#  R HIVNCD 2022
#  Driver.R class
#
#####################################
print("Sourcing Driver.R ... ")
{
source("globalEnvironment.R")
source("person.R")
source("population.R")
source("rHelperFunctions.R")
source("rCoreFunctions.R")
source("plots.R")
source("testing_ncd_prevalences.R")
source("ncdTestFunctions.R")
}
###################
# Create the population in year 2014; save the stats and move the clock to 2015
rep=1
bDebugMode=T
set.seed(1)
pop<-create.initial.population(id = rep,n = POP.SIZE)
# setting up person attributes
pop<-invisible(set.initial.hiv.status(pop ))
pop<-invisible(set.cvd.risk(pop))
pop$record.annual.stats()
pop$increaseYear()
#
filter.5D.stats.by.field(pop$stats$n.state.sizes, keep.dimensions = c('year'))
filter.5D.stats.by.field(pop$stats$n.state.sizes, keep.dimensions = c('year','hiv.status'))
filter.5D.stats.by.field(pop$stats$n.state.sizes, keep.dimensions = c('year','ncd.status'))
# need a standard set of plots to review the population
# please add notes/documentation to plots.R
#
#  R HIVNCD 2022
#  Driver.R class
#
#####################################
print("Sourcing Driver.R ... ")
{
source("globalEnvironment.R")
source("person.R")
source("population.R")
source("rHelperFunctions.R")
source("rCoreFunctions.R")
source("plots.R")
source("testing_ncd_prevalences.R")
source("ncdTestFunctions.R")
}
# need a standard set of plots to review the population
# please add notes/documentation to plots.R
#
#  R HIVNCD 2022
#  Driver.R class
#
#####################################
print("Sourcing Driver.R ... ")
{
source("globalEnvironment.R")
source("person.R")
source("population.R")
source("rHelperFunctions.R")
source("rCoreFunctions.R")
source("plots.R")
source("testing_ncd_prevalences.R")
source("ncdTestFunctions.R")
}
#######################################################
# SINGLE
# Create the population in year 2014; save the stats and move the clock to 2015
rep=1
bDebugMode=T
set.seed(1)
pop<-create.initial.population(id = rep,n = POP.SIZE)
# setting up person attributes
pop<-invisible(set.initial.hiv.status(pop ))
pop<-invisible(set.cvd.risk(pop))
pop$record.annual.stats()
pop$increaseYear()
pop$params$prob.first.cvd.event.mi.male
#
#  R HIVNCD 2022
#  Driver.R class
#
#####################################
print("Sourcing Driver.R ... ")
{
source("globalEnvironment.R")
source("person.R")
source("population.R")
source("rHelperFunctions.R")
source("rCoreFunctions.R")
source("plots.R")
source("testing_ncd_prevalences.R")
source("ncdTestFunctions.R")
}
# Create the population in year 2014; save the stats and move the clock to 2015
rep=1
bDebugMode=T
set.seed(1)
pop<-create.initial.population(id = rep,n = POP.SIZE)
# setting up person attributes
pop<-invisible(set.initial.hiv.status(pop ))
pop<-invisible(set.cvd.risk(pop))
pop$record.annual.stats()
pop$increaseYear()
invisible(lapply(pop$members,function(p){
p.cvd.risk = p$returnCVDrisk(pop$params) # this function evaluates whether they have history of cvd events and returns appropriate risk
if(runif(1) < p.cvd.risk){ # evaluate if they have a cvd event
# evaluate whether this should be a stroke event or mi event (assign default male probability, change to female if sex is female)
prob.mi=pop$params$prob.first.cvd.event.mi.male
if(p$sex==FEMALE) prob.mi=pop$params$prob.first.cvd.event.mi.female
if(runif(1) < prob.mi){ # mi event
p$model.mi.event(pop$params$TNOW)
pop$record.mi.inc(p$agegroup,p$sex,p$hivState,p$ncdState)
} else{ # stroke event
p$model.stroke.event(pop$params$TNOW)
pop$record.stroke.inc(p$agegroup,p$sex,p$hivState,p$ncdState)
}
}}))
pop
p=pop$members[1]
p=pop$members[[1]]
p.cvd.risk = p$returnCVDrisk(pop$params) # this function evaluates whether they have history of cvd events and returns appropriate risk
# need a standard set of plots to review the population
# please add notes/documentation to plots.R
#
#  R HIVNCD 2022
#  Driver.R class
#
#####################################
print("Sourcing Driver.R ... ")
{
source("globalEnvironment.R")
source("person.R")
source("population.R")
source("rHelperFunctions.R")
source("rCoreFunctions.R")
source("plots.R")
source("testing_ncd_prevalences.R")
source("ncdTestFunctions.R")
}
# Create the population in year 2014; save the stats and move the clock to 2015
rep=1
bDebugMode=T
set.seed(1)
pop<-create.initial.population(id = rep,n = POP.SIZE)
# setting up person attributes
pop<-invisible(set.initial.hiv.status(pop ))
pop<-invisible(set.cvd.risk(pop))
# need a standard set of plots to review the population
# please add notes/documentation to plots.R
#
#  R HIVNCD 2022
#  Driver.R class
#
#####################################
print("Sourcing Driver.R ... ")
{
source("globalEnvironment.R")
source("person.R")
source("population.R")
source("rHelperFunctions.R")
source("rCoreFunctions.R")
source("plots.R")
source("testing_ncd_prevalences.R")
source("ncdTestFunctions.R")
}
# Create the population in year 2014; save the stats and move the clock to 2015
rep=1
bDebugMode=T
set.seed(1)
pop<-create.initial.population(id = rep,n = POP.SIZE)
# setting up person attributes
pop<-invisible(set.initial.hiv.status(pop ))
pop<-invisible(set.cvd.risk(pop))
pop$record.annual.stats()
pop$increaseYear()
invisible(lapply(pop$members,function(p){
# for whatever age group they are in, access the 10-year risk for the previous age group
p.agegroup=pmax(1, p$agegroup-1 )# for the youngest age group, just make this 1, not 0
p$monthlyCvdRisk= pop$params$monthly.cvd.risk.by.age.sex[p.agegroup,p$sex,p$ncdState]
}))
invisible(lapply(pop$members,function(p){
#1-ENGAGEMENT
if (p$hivState == HIV.UNENG) {
if (runif(1) < prob.eng[p$agegroup,p$sex]){
p$model.hiv.eng(pop$params$TNOW)
pop$record.hiv.eng(p$agegroup,p$sex,p$hivState,p$ncdState)
}
}else{      #2- DISENGAGEMENT
if (p$hivState== HIV.ENG) {
if (runif(1)<prob.diseng[p$agegroup,p$sex]){
p$model.hiv.uneng(pop$params$TNOW)
pop$record.hiv.uneng(p$agegroup,p$sex,p$hivState,p$ncdState)
}
}else{        #3- DIAGNOSIS
if (p$hivState== HIV.UNDIAG) {
if (runif(1)<prob.diag[p$agegroup,p$sex]){
p$model.hiv.diag(pop$params$TNOW)
pop$record.hiv.diag(p$agegroup,p$sex,p$hivState,p$ncdState)
}
}else{          #4- INCIDENCE
if (p$hivState== HIV.NEG) {
if (runif(1)<prob.inc[p$agegroup,p$sex]){
p$model.hiv.inc(pop$params$TNOW)
pop$record.hiv.inc(p$agegroup,p$sex,p$hivState,p$ncdState)
}
}else {
browser()
stop(paste("Error: Person ",x," hivState is ",p$hivState," and it didnt meet any criteria"))
}}}}}))
invisible(lapply(pop$members,function(p){
p.cvd.risk = p$return.cvd.risk(pop$params) # this function evaluates whether they have history of cvd events and returns appropriate risk
if(runif(1) < p.cvd.risk){ # evaluate if they have a cvd event
# evaluate whether this should be a stroke event or mi event (assign default male probability, change to female if sex is female)
prob.mi=pop$params$prob.first.cvd.event.mi.male
if(p$sex==FEMALE) prob.mi=pop$params$prob.first.cvd.event.mi.female
if(runif(1) < prob.mi){ # mi event
p$model.mi.event(pop$params$TNOW)
pop$record.mi.inc(p$agegroup,p$sex,p$hivState,p$ncdState)
} else{ # stroke event
p$model.stroke.event(pop$params$TNOW)
pop$record.stroke.inc(p$agegroup,p$sex,p$hivState,p$ncdState)
}
}}))
#
filter.5D.stats.by.field(pop$stats$n.mi.inc, keep.dimensions = c('year'))
filter.5D.stats.by.field(pop$stats$n.stroke.inc, keep.dimensions = c('year'))
p=pop$members[[1]]
p.cvd.risk = p$return.cvd.risk(pop$params) # this function evaluates whether they have history of cvd events and returns appropriate risk
p.cvd.risk
if(runif(1) < p.cvd.risk){ # evaluate if they have a cvd event
# evaluate whether this should be a stroke event or mi event (assign default male probability, change to female if sex is female)
prob.mi=pop$params$prob.first.cvd.event.mi.male
if(p$sex==FEMALE) prob.mi=pop$params$prob.first.cvd.event.mi.female
if(runif(1) < prob.mi){ # mi event
p$model.mi.event(pop$params$TNOW)
pop$record.mi.inc(p$agegroup,p$sex,p$hivState,p$ncdState)
} else{ # stroke event
p$model.stroke.event(pop$params$TNOW)
pop$record.stroke.inc(p$agegroup,p$sex,p$hivState,p$ncdState)
}
}}))
if(runif(1) < p.cvd.risk){ # evaluate if they have a cvd event
# evaluate whether this should be a stroke event or mi event (assign default male probability, change to female if sex is female)
prob.mi=pop$params$prob.first.cvd.event.mi.male
if(p$sex==FEMALE) prob.mi=pop$params$prob.first.cvd.event.mi.female
if(runif(1) < prob.mi){ # mi event
p$model.mi.event(pop$params$TNOW)
pop$record.mi.inc(p$agegroup,p$sex,p$hivState,p$ncdState)
} else{ # stroke event
p$model.stroke.event(pop$params$TNOW)
pop$record.stroke.inc(p$agegroup,p$sex,p$hivState,p$ncdState)
}
}}))
if(runif(1) < p.cvd.risk){ # evaluate if they have a cvd event
# evaluate whether this should be a stroke event or mi event (assign default male probability, change to female if sex is female)
prob.mi=pop$params$prob.first.cvd.event.mi.male
if(p$sex==FEMALE) prob.mi=pop$params$prob.first.cvd.event.mi.female
if(runif(1) < prob.mi){ # mi event
p$model.mi.event(pop$params$TNOW)
pop$record.mi.inc(p$agegroup,p$sex,p$hivState,p$ncdState)
} else{ # stroke event
p$model.stroke.event(pop$params$TNOW)
pop$record.stroke.inc(p$agegroup,p$sex,p$hivState,p$ncdState)
}
}}
if(runif(1) < p.cvd.risk){ # evaluate if they have a cvd event
# evaluate whether this should be a stroke event or mi event (assign default male probability, change to female if sex is female)
prob.mi=pop$params$prob.first.cvd.event.mi.male
if(p$sex==FEMALE) prob.mi=pop$params$prob.first.cvd.event.mi.female
if(runif(1) < prob.mi){ # mi event
p$model.mi.event(pop$params$TNOW)
pop$record.mi.inc(p$agegroup,p$sex,p$hivState,p$ncdState)
} else{ # stroke event
p$model.stroke.event(pop$params$TNOW)
pop$record.stroke.inc(p$agegroup,p$sex,p$hivState,p$ncdState)
}
}
params$stroke.monthly.mortality
pop$params$stroke.monthly.mortality
#5-load CVD mortality data
load("data/monthly.stroke.mortality.Rdata")
load("data/monthly.mi.mortality.Rdata")
stroke.monthly.mortality
first.mi.monthly.mortality
mi.monthly.mortality
a=list(1,1,1,1,1,1)
a
a[1]
a[-1]
a=list(1:6)
a
a=list(1,2,3,4,5,6)
a
a[-6]
a[-6]
a[-5]
#
#  R HIVNCD 2022
#  Driver.R class
#
#####################################
print("Sourcing Driver.R ... ")
{
source("globalEnvironment.R")
source("person.R")
source("population.R")
source("rHelperFunctions.R")
source("rCoreFunctions.R")
source("plots.R")
source("testing_ncd_prevalences.R")
source("ncdTestFunctions.R")
}
list.of.packages <- c("ggplot2", "Rcpp")
list.of.packages <- c("ggplot2", "R6")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
new.packages
session_time=1
write.table(x = session_time,file = "outputs/out-sessionTime")
write.table(x = session_time,file = "outputs/out-sessionTime",col.names = F)
write.table(x = session_time,file = "outputs/out-sessionTime",col.names = F,row.names = F)
